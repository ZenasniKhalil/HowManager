package com.JESIKOM.HowManager.models;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.time.DayOfWeek;
import java.time.LocalTime;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Assertions.assertTrue;

public class WeeklyTimeSlotTest {

 WeeklyTimeSlot currentTs;
LocalTime beforeTime=LocalTime.of(0,0,0);
LocalTime afterTime = LocalTime.of(3,0,0);
LocalTime withinTime = LocalTime.of(1,30,0);
DayOfWeek beforeDate = DayOfWeek.MONDAY;
DayOfWeek afterDate = DayOfWeek.WEDNESDAY;
DayOfWeek sameDate = DayOfWeek.TUESDAY;
@BeforeEach
void setUp() {
    currentTs = new WeeklyTimeSlot(DayOfWeek.TUESDAY,LocalTime.of(1,0),DayOfWeek.TUESDAY,
            LocalTime.of(2,0));
}

@Test
void mergeTest(){
    WeeklyTimeSlot nextTs = new WeeklyTimeSlot(sameDate, beforeTime,afterDate,beforeTime.plusMinutes(30));
    WeeklyTimeSlot ts=WeeklyTimeSlot.merge(currentTs,nextTs);
    assertEquals(currentTs.startDay,ts.startDay);
    assertEquals(nextTs.endDay,ts.endDay);
    assertEquals(nextTs.startTime,ts.startTime);
    assertEquals(nextTs.endTime,ts.endTime);
}

@Test
void isBeforeTest() {
    assertFalse(currentTs.isBefore(sameDate,beforeTime));
    assertFalse(currentTs.isBefore(sameDate,withinTime));
    assertFalse(currentTs.isBefore(beforeDate,afterTime));
    assertTrue(currentTs.isBefore(afterDate,beforeTime));
    assertTrue(currentTs.isBefore(sameDate,afterTime));

}



@Test
void isAfterTest() {
    assertTrue(currentTs.isAfter(sameDate,beforeTime));
    assertFalse(currentTs.isAfter(sameDate,withinTime));
    assertTrue(currentTs.isAfter(beforeDate,afterTime));
    assertFalse(currentTs.isAfter(afterDate,beforeTime));
    assertFalse(currentTs.isAfter(sameDate,afterTime));
}


@Test
void isWithinTest() {
    assertFalse(currentTs.isWithin(afterDate,beforeTime));
    assertFalse(currentTs.isWithin(sameDate,afterTime));
    assertTrue(currentTs.isWithin(sameDate,withinTime));
    assertTrue(currentTs.isWithin(sameDate,currentTs.startTime));
    assertTrue(currentTs.isWithin(sameDate,currentTs.endTime));
}




@Test
void overlapsWith() {
    WeeklyTimeSlot beforeAfter = new WeeklyTimeSlot(beforeDate,beforeTime,sameDate, afterTime);
    WeeklyTimeSlot beforeBefore = new WeeklyTimeSlot(beforeDate,afterTime,sameDate, beforeTime);
    WeeklyTimeSlot afterAfter = new WeeklyTimeSlot(sameDate,afterTime,afterDate, beforeTime);
    WeeklyTimeSlot beforeWithin = new WeeklyTimeSlot(beforeDate,beforeTime,sameDate,withinTime);
    WeeklyTimeSlot withinAfter = new WeeklyTimeSlot(sameDate,withinTime,sameDate,afterTime);
    WeeklyTimeSlot withinWithin = new WeeklyTimeSlot(sameDate,withinTime,sameDate,withinTime.plusMinutes(10));
    assertFalse(currentTs.overlapsWith(beforeBefore));
    assertFalse(currentTs.overlapsWith(afterAfter));
    assertTrue(currentTs.overlapsWith(beforeAfter));
    assertTrue(currentTs.overlapsWith(beforeWithin));
    assertTrue(currentTs.overlapsWith(withinAfter));
    assertTrue(currentTs.overlapsWith(withinWithin));
    }
    @Test
    void computeTimeTest(){
    WeeklyTimeSlot threeH = new WeeklyTimeSlot(DayOfWeek.MONDAY,beforeTime,DayOfWeek.MONDAY,afterTime);
    WeeklyTimeSlot twentyFiveHalf = new WeeklyTimeSlot(DayOfWeek.MONDAY,beforeTime,DayOfWeek.TUESDAY,withinTime);
    assertEquals(3.0,threeH.computeTime());
    assertEquals(25.5,twentyFiveHalf.computeTime());

    }
}
